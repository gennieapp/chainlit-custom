pool:
  vmImage: 'ubuntu-latest'

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true

  - script: |
      python -m pip install --upgrade pip
      pip install poetry
    displayName: 'Configure Python environment and install Poetry'

  - script: |
      cd backend
      poetry install
    displayName: 'Install backend dependencies'
    
  - script: |
      npm install -g pnpm
    displayName: 'Install pnpm'

  - script: |
      pnpm install
      pnpm run buildUi
    displayName: 'Build frontend with PNPM'

  - script: |
      mkdir -p backend/chainlit/frontend/dist
      mkdir -p backend/chainlit/copilot/dist
      cp -R frontend/dist/* backend/chainlit/frontend/dist/
      cp -R libs/copilot/dist/* backend/chainlit/copilot/dist/
    displayName: 'Copy the built files from the front-end'

  - script: |
      cd backend
      poetry add --dev build twine
      poetry build
    displayName: 'Build package with poetry'

  - script: |
      poetry config pypi-token.azuredevops $(ARTIFACTS_PAT)
      poetry config repositories.azuredevops $(ARTIFACTS_FEED)
      poetry run twine upload --repository azuredevops dist/*
    displayName: 'Upload package to Azure Artifacts'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'dist'
      publishLocation: 'pipeline'
    displayName: 'Publish packages as pipeline artifact'

